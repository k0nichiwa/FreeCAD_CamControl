# FILE: CamControl.py 
# DO NOT EDIT THIS FILE IT IS AUTO-GENERATED 
# version 0.10 June 2020 by k0nichiwa 
# LICENSE:  This software package and portions of it can be freely modified, included in other software, and distributed 
# Source code available at: https://github.com/k0nichiwa/FreeCAD_CamControl 

import PySide

class Ui_CamControlPanelUI(object):
    def setupUi(self, CamControlPanelUI):
        if not CamControlPanelUI.objectName():
            CamControlPanelUI.setObjectName(u"CamControlPanelUI")
        CamControlPanelUI.resize(300, 952)
        CamControlPanelUI.setMaximumSize(PySide.QtCore.QSize(16777215, 16777215))
        self.verticalLayout = PySide.QtGui.QVBoxLayout(CamControlPanelUI)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.horizontalLayout_11 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_11.setObjectName(u"horizontalLayout_11")
        self.ReReadPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.ReReadPushButton.setObjectName(u"ReReadPushButton")
        self.ReReadPushButton.setMaximumSize(PySide.QtCore.QSize(80, 16777215))

        self.horizontalLayout_11.addWidget(self.ReReadPushButton)

        self.SettingsPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.SettingsPushButton.setObjectName(u"SettingsPushButton")
        self.SettingsPushButton.setMaximumSize(PySide.QtCore.QSize(80, 16777215))

        self.horizontalLayout_11.addWidget(self.SettingsPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout_11)

        self.horizontalLayout_10 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_10.setObjectName(u"horizontalLayout_10")
        self.GameControlCheckBox = PySide.QtGui.QCheckBox(CamControlPanelUI)
        self.GameControlCheckBox.setObjectName(u"GameControlCheckBox")
        font = PySide.QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.GameControlCheckBox.setFont(font)

        self.horizontalLayout_10.addWidget(self.GameControlCheckBox)

        self.GameControlEndInputLabel = PySide.QtGui.QLabel(CamControlPanelUI)
        self.GameControlEndInputLabel.setObjectName(u"GameControlEndInputLabel")
        self.GameControlEndInputLabel.setAlignment(PySide.QtCore.Qt.AlignCenter)

        self.horizontalLayout_10.addWidget(self.GameControlEndInputLabel)


        self.verticalLayout.addLayout(self.horizontalLayout_10)

        self.horizontalLayout_17 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_17.setObjectName(u"horizontalLayout_17")
        self.label_9 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_9.setObjectName(u"label_9")
        self.label_9.setAlignment(PySide.QtCore.Qt.AlignLeading|PySide.QtCore.Qt.AlignLeft|PySide.QtCore.Qt.AlignVCenter)

        self.horizontalLayout_17.addWidget(self.label_9)

        self.GameControlDecreaseMoveSpeedPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.GameControlDecreaseMoveSpeedPushButton.setObjectName(u"GameControlDecreaseMoveSpeedPushButton")
        self.GameControlDecreaseMoveSpeedPushButton.setMaximumSize(PySide.QtCore.QSize(40, 16777215))

        self.horizontalLayout_17.addWidget(self.GameControlDecreaseMoveSpeedPushButton)

        self.GameControlMoveScaleLabel = PySide.QtGui.QLabel(CamControlPanelUI)
        self.GameControlMoveScaleLabel.setObjectName(u"GameControlMoveScaleLabel")
        font1 = PySide.QtGui.QFont()
        font1.setBold(True)
        font1.setWeight(75)
        self.GameControlMoveScaleLabel.setFont(font1)

        self.horizontalLayout_17.addWidget(self.GameControlMoveScaleLabel)

        self.GameControlIncreaseMoveSpeedPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.GameControlIncreaseMoveSpeedPushButton.setObjectName(u"GameControlIncreaseMoveSpeedPushButton")
        self.GameControlIncreaseMoveSpeedPushButton.setMaximumSize(PySide.QtCore.QSize(40, 16777215))

        self.horizontalLayout_17.addWidget(self.GameControlIncreaseMoveSpeedPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout_17)

        self.horizontalLayout_12 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_12.setObjectName(u"horizontalLayout_12")
        self.label_7 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_7.setObjectName(u"label_7")
        self.label_7.setMaximumSize(PySide.QtCore.QSize(60, 16777215))
        self.label_7.setFont(font)

        self.horizontalLayout_12.addWidget(self.label_7)

        self.CamLocationsComboBox = PySide.QtGui.QComboBox(CamControlPanelUI)
        self.CamLocationsComboBox.setObjectName(u"CamLocationsComboBox")

        self.horizontalLayout_12.addWidget(self.CamLocationsComboBox)


        self.verticalLayout.addLayout(self.horizontalLayout_12)

        self.horizontalLayout_9 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_9.setObjectName(u"horizontalLayout_9")
        self.InsCamLocPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.InsCamLocPushButton.setObjectName(u"InsCamLocPushButton")
        self.InsCamLocPushButton.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_9.addWidget(self.InsCamLocPushButton)

        self.DelCamLocPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.DelCamLocPushButton.setObjectName(u"DelCamLocPushButton")
        self.DelCamLocPushButton.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_9.addWidget(self.DelCamLocPushButton)

        self.RenameCamLocPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.RenameCamLocPushButton.setObjectName(u"RenameCamLocPushButton")
        self.RenameCamLocPushButton.setMaximumSize(PySide.QtCore.QSize(90, 16777215))

        self.horizontalLayout_9.addWidget(self.RenameCamLocPushButton)

        self.UpdateCamLocPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.UpdateCamLocPushButton.setObjectName(u"UpdateCamLocPushButton")
        self.UpdateCamLocPushButton.setMaximumSize(PySide.QtCore.QSize(80, 16777215))

        self.horizontalLayout_9.addWidget(self.UpdateCamLocPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout_9)

        self.horizontalLayout_13 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_13.setObjectName(u"horizontalLayout_13")
        self.horizontalLayout_13.setContentsMargins(-1, 0, -1, 0)
        self.label_10 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_10.setObjectName(u"label_10")
        self.label_10.setMaximumSize(PySide.QtCore.QSize(60, 16777215))
        self.label_10.setFont(font)

        self.horizontalLayout_13.addWidget(self.label_10)

        self.CameraTypeComboBox = PySide.QtGui.QComboBox(CamControlPanelUI)
        self.CameraTypeComboBox.setObjectName(u"CameraTypeComboBox")

        self.horizontalLayout_13.addWidget(self.CameraTypeComboBox)


        self.verticalLayout.addLayout(self.horizontalLayout_13)

        self.label = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label.setObjectName(u"label")
        self.label.setFont(font)

        self.verticalLayout.addWidget(self.label)

        self.horizontalLayout_16 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_16.setObjectName(u"horizontalLayout_16")
        self.label_15 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_15.setObjectName(u"label_15")
        self.label_15.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_16.addWidget(self.label_15)

        self.Pos_X = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Pos_X.setObjectName(u"Pos_X")
        self.Pos_X.setMinimum(-1000000.000000000000000)
        self.Pos_X.setMaximum(1000000.000000000000000)

        self.horizontalLayout_16.addWidget(self.Pos_X)


        self.verticalLayout.addLayout(self.horizontalLayout_16)

        self.horizontalLayout_15 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_15.setObjectName(u"horizontalLayout_15")
        self.label_16 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_16.setObjectName(u"label_16")
        self.label_16.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_15.addWidget(self.label_16)

        self.Pos_Y = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Pos_Y.setObjectName(u"Pos_Y")
        self.Pos_Y.setMinimum(-1000000.000000000000000)
        self.Pos_Y.setMaximum(1000000.000000000000000)

        self.horizontalLayout_15.addWidget(self.Pos_Y)


        self.verticalLayout.addLayout(self.horizontalLayout_15)

        self.horizontalLayout = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.label_17 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_17.setObjectName(u"label_17")
        self.label_17.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout.addWidget(self.label_17)

        self.Pos_Z = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Pos_Z.setObjectName(u"Pos_Z")
        self.Pos_Z.setMinimum(-1000000.000000000000000)
        self.Pos_Z.setMaximum(1000000.000000000000000)

        self.horizontalLayout.addWidget(self.Pos_Z)


        self.verticalLayout.addLayout(self.horizontalLayout)

        self.label_2 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setFont(font)

        self.verticalLayout.addWidget(self.label_2)

        self.horizontalLayout_5 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_5.setObjectName(u"horizontalLayout_5")
        self.label_4 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_4.setObjectName(u"label_4")
        self.label_4.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_5.addWidget(self.label_4)

        self.PointAt_X = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.PointAt_X.setObjectName(u"PointAt_X")
        self.PointAt_X.setMinimum(-1000000.000000000000000)
        self.PointAt_X.setMaximum(1000000.000000000000000)

        self.horizontalLayout_5.addWidget(self.PointAt_X)


        self.verticalLayout.addLayout(self.horizontalLayout_5)

        self.horizontalLayout_6 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_6.setObjectName(u"horizontalLayout_6")
        self.label_11 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_11.setObjectName(u"label_11")
        self.label_11.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_6.addWidget(self.label_11)

        self.PointAt_Y = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.PointAt_Y.setObjectName(u"PointAt_Y")
        self.PointAt_Y.setMinimum(-1000000.000000000000000)
        self.PointAt_Y.setMaximum(1000000.000000000000000)

        self.horizontalLayout_6.addWidget(self.PointAt_Y)


        self.verticalLayout.addLayout(self.horizontalLayout_6)

        self.horizontalLayout_2 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.label_12 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_12.setObjectName(u"label_12")
        self.label_12.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_2.addWidget(self.label_12)

        self.PointAt_Z = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.PointAt_Z.setObjectName(u"PointAt_Z")
        self.PointAt_Z.setMinimum(-1000000.000000000000000)
        self.PointAt_Z.setMaximum(1000000.000000000000000)

        self.horizontalLayout_2.addWidget(self.PointAt_Z)


        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.horizontalLayout_14 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_14.setObjectName(u"horizontalLayout_14")
        self.label_6 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_6.setObjectName(u"label_6")
        self.label_6.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_14.addWidget(self.label_6)

        self.Up_X = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Up_X.setObjectName(u"Up_X")
        self.Up_X.setMinimum(-1000000.000000000000000)
        self.Up_X.setMaximum(1000000.000000000000000)

        self.horizontalLayout_14.addWidget(self.Up_X)


        self.verticalLayout.addLayout(self.horizontalLayout_14)

        self.horizontalLayout_7 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_7.setObjectName(u"horizontalLayout_7")
        self.label_14 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_14.setObjectName(u"label_14")
        self.label_14.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_7.addWidget(self.label_14)

        self.Up_Y = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Up_Y.setObjectName(u"Up_Y")
        self.Up_Y.setMinimum(-1000000.000000000000000)
        self.Up_Y.setMaximum(1000000.000000000000000)

        self.horizontalLayout_7.addWidget(self.Up_Y)


        self.verticalLayout.addLayout(self.horizontalLayout_7)

        self.horizontalLayout_3 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.label_13 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_13.setObjectName(u"label_13")
        self.label_13.setMaximumSize(PySide.QtCore.QSize(50, 16777215))

        self.horizontalLayout_3.addWidget(self.label_13)

        self.Up_Z = PySide.QtGui.QDoubleSpinBox(CamControlPanelUI)
        self.Up_Z.setObjectName(u"Up_Z")
        self.Up_Z.setMinimum(-1000000.000000000000000)
        self.Up_Z.setMaximum(1000000.000000000000000)

        self.horizontalLayout_3.addWidget(self.Up_Z)


        self.verticalLayout.addLayout(self.horizontalLayout_3)

        self.horizontalLayout_4 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.label_3 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setMaximumSize(PySide.QtCore.QSize(16777215, 16777215))
        self.label_3.setFont(font1)

        self.horizontalLayout_4.addWidget(self.label_3)

        self.YPRZeroPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.YPRZeroPushButton.setObjectName(u"YPRZeroPushButton")
        self.YPRZeroPushButton.setMaximumSize(PySide.QtCore.QSize(30, 16777215))

        self.horizontalLayout_4.addWidget(self.YPRZeroPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout_4)

        self.YawScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.YawScrollBar.setObjectName(u"YawScrollBar")
        self.YawScrollBar.setMinimum(-180)
        self.YawScrollBar.setMaximum(180)
        self.YawScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.YawScrollBar)

        self.PitchScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.PitchScrollBar.setObjectName(u"PitchScrollBar")
        self.PitchScrollBar.setMinimum(-180)
        self.PitchScrollBar.setMaximum(180)
        self.PitchScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.PitchScrollBar)

        self.RollScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.RollScrollBar.setObjectName(u"RollScrollBar")
        self.RollScrollBar.setMinimum(-180)
        self.RollScrollBar.setMaximum(180)
        self.RollScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.RollScrollBar)

        self.horizontalLayout_8 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_8.setObjectName(u"horizontalLayout_8")
        self.label_5 = PySide.QtGui.QLabel(CamControlPanelUI)
        self.label_5.setObjectName(u"label_5")
        self.label_5.setFont(font)

        self.horizontalLayout_8.addWidget(self.label_5)

        self.MoveScaleDecreasePushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.MoveScaleDecreasePushButton.setObjectName(u"MoveScaleDecreasePushButton")
        self.MoveScaleDecreasePushButton.setMaximumSize(PySide.QtCore.QSize(40, 16777215))

        self.horizontalLayout_8.addWidget(self.MoveScaleDecreasePushButton)

        self.MoveScaleLabel = PySide.QtGui.QLabel(CamControlPanelUI)
        self.MoveScaleLabel.setObjectName(u"MoveScaleLabel")
        self.MoveScaleLabel.setAlignment(PySide.QtCore.Qt.AlignCenter)

        self.horizontalLayout_8.addWidget(self.MoveScaleLabel)

        self.MoveScaleIncreasePushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.MoveScaleIncreasePushButton.setObjectName(u"MoveScaleIncreasePushButton")
        self.MoveScaleIncreasePushButton.setMaximumSize(PySide.QtCore.QSize(40, 16777215))

        self.horizontalLayout_8.addWidget(self.MoveScaleIncreasePushButton)

        self.MoveZeroPushButton = PySide.QtGui.QPushButton(CamControlPanelUI)
        self.MoveZeroPushButton.setObjectName(u"MoveZeroPushButton")
        self.MoveZeroPushButton.setMaximumSize(PySide.QtCore.QSize(30, 16777215))

        self.horizontalLayout_8.addWidget(self.MoveZeroPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout_8)

        self.MoveForwardScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.MoveForwardScrollBar.setObjectName(u"MoveForwardScrollBar")
        self.MoveForwardScrollBar.setMinimum(-100)
        self.MoveForwardScrollBar.setMaximum(100)
        self.MoveForwardScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.MoveForwardScrollBar)

        self.MoveRightScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.MoveRightScrollBar.setObjectName(u"MoveRightScrollBar")
        self.MoveRightScrollBar.setMinimum(-100)
        self.MoveRightScrollBar.setMaximum(100)
        self.MoveRightScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.MoveRightScrollBar)

        self.MoveUpScrollBar = PySide.QtGui.QSlider(CamControlPanelUI)
        self.MoveUpScrollBar.setObjectName(u"MoveUpScrollBar")
        self.MoveUpScrollBar.setMinimum(-100)
        self.MoveUpScrollBar.setMaximum(100)
        self.MoveUpScrollBar.setOrientation(PySide.QtCore.Qt.Horizontal)

        self.verticalLayout.addWidget(self.MoveUpScrollBar)


        self.retranslateUi(CamControlPanelUI)

        PySide.QtCore.QMetaObject.connectSlotsByName(CamControlPanelUI)
    # setupUi

    def retranslateUi(self, CamControlPanelUI):
        CamControlPanelUI.setWindowTitle(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Dialog", None))
        self.ReReadPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"ReRead", None))
        self.SettingsPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Settings", None))
        self.GameControlCheckBox.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Game Control", None))
        self.GameControlEndInputLabel.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"('M' to exit')", None))
        self.label_9.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"speed", None))
        self.GameControlDecreaseMoveSpeedPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"\u25c0", None))
        self.GameControlMoveScaleLabel.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"TextLabel", None))
        self.GameControlIncreaseMoveSpeedPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"\u25b6", None))
        self.label_7.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Saved", None))
        self.InsCamLocPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Ins", None))
        self.DelCamLocPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Del", None))
        self.RenameCamLocPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Rename", None))
        self.UpdateCamLocPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Update", None))
        self.label_10.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Type", None))
        self.label.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Position", None))
        self.label_15.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"X", None))
        self.label_16.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Y", None))
        self.label_17.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Z", None))
        self.label_2.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Direction Point At / Up", None))
        self.label_4.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"PtAt X", None))
        self.label_11.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"PtAt Y", None))
        self.label_12.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"PtAt Z", None))
        self.label_6.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Up X", None))
        self.label_14.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Up Y", None))
        self.label_13.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Up Z", None))
        self.label_3.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Direction Angles", None))
        self.YPRZeroPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"0", None))
        self.label_5.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"Move", None))
        self.MoveScaleDecreasePushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"\u25c0", None))
        self.MoveScaleLabel.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"TextLabel", None))
        self.MoveScaleIncreasePushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"\u25b6", None))
        self.MoveZeroPushButton.setText(PySide.QtCore.QCoreApplication.translate("CamControlPanelUI", u"0", None))
    # retranslateUi

class Ui_StartGameControlDialogUI(object):
    def setupUi(self, StartGameControlDialogUI):
        if not StartGameControlDialogUI.objectName():
            StartGameControlDialogUI.setObjectName(u"StartGameControlDialogUI")
        StartGameControlDialogUI.resize(354, 342)
        self.verticalLayout = PySide.QtGui.QVBoxLayout(StartGameControlDialogUI)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.horizontalLayout_2 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.label = PySide.QtGui.QLabel(StartGameControlDialogUI)
        self.label.setObjectName(u"label")
        font = PySide.QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(PySide.QtCore.Qt.AlignCenter)

        self.horizontalLayout_2.addWidget(self.label)


        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.InputToExitLabel = PySide.QtGui.QLabel(StartGameControlDialogUI)
        self.InputToExitLabel.setObjectName(u"InputToExitLabel")
        self.InputToExitLabel.setFont(font)
        self.InputToExitLabel.setAlignment(PySide.QtCore.Qt.AlignCenter)

        self.verticalLayout.addWidget(self.InputToExitLabel)

        self.horizontalLayout = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.CancelPushButton = PySide.QtGui.QPushButton(StartGameControlDialogUI)
        self.CancelPushButton.setObjectName(u"CancelPushButton")
        self.CancelPushButton.setMaximumSize(PySide.QtCore.QSize(100, 16777215))

        self.horizontalLayout.addWidget(self.CancelPushButton)

        self.StartPushButton = PySide.QtGui.QPushButton(StartGameControlDialogUI)
        self.StartPushButton.setObjectName(u"StartPushButton")
        self.StartPushButton.setMaximumSize(PySide.QtCore.QSize(100, 16777215))
        self.StartPushButton.setAutoDefault(True)

        self.horizontalLayout.addWidget(self.StartPushButton)


        self.verticalLayout.addLayout(self.horizontalLayout)

        self.label_3 = PySide.QtGui.QLabel(StartGameControlDialogUI)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setWordWrap(True)

        self.verticalLayout.addWidget(self.label_3)

        self.horizontalLayout_3 = PySide.QtGui.QHBoxLayout()
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.DontShowAgainCheckBox = PySide.QtGui.QCheckBox(StartGameControlDialogUI)
        self.DontShowAgainCheckBox.setObjectName(u"DontShowAgainCheckBox")

        self.horizontalLayout_3.addWidget(self.DontShowAgainCheckBox)

        self.label_2 = PySide.QtGui.QLabel(StartGameControlDialogUI)
        self.label_2.setObjectName(u"label_2")
        font1 = PySide.QtGui.QFont()
        font1.setPointSize(14)
        font1.setBold(True)
        font1.setWeight(75)
        self.label_2.setFont(font1)

        self.horizontalLayout_3.addWidget(self.label_2)


        self.verticalLayout.addLayout(self.horizontalLayout_3)


        self.retranslateUi(StartGameControlDialogUI)

        self.StartPushButton.setDefault(True)


        PySide.QtCore.QMetaObject.connectSlotsByName(StartGameControlDialogUI)
    # setupUi

    def retranslateUi(self, StartGameControlDialogUI):
        StartGameControlDialogUI.setWindowTitle(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"CountdownWindow", None))
        self.label.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"Start Game Control", None))
        self.InputToExitLabel.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"USE 'M' to exit", None))
        self.CancelPushButton.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"Cancel", None))
        self.StartPushButton.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"Start", None))
        self.label_3.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"You may not be able to uncheck Game Control checkbox to exit.  Game Control may take over mouse buttons and some keys.", None))
        self.DontShowAgainCheckBox.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"Don't show again", None))
        self.label_2.setText(PySide.QtCore.QCoreApplication.translate("StartGameControlDialogUI", u"See Help for explanation", None))
    # retranslateUi

# *********************************************************
# *********************************************************
# *********************************************************
# FILE:  develop_CamControl.py
#
# k0nichiwa
# version 0.10
# June 2020
#
# SOURCE REPO: https://github.com/k0nichiwa/FreeCAD_CamControl
# VIDEO DEMO: https://www.bitchute.com/video/gWMVmOAi1KR7/
# LICENSE:  This software package and portions of it can be freely modified, included in other software, and distributed
#
# See 'Help" string in UI or below in this file for description
#
# Note this is the version that should be used
# for development
#
# CamControl.py is version for deploymebt and is
# generated by the deploy.sh script
#
# Developed and tested under (FreeCAD About information):
#
# OS: macOS 10.13
# Word size of OS: 64-bit
# Word size of FreeCAD: 64-bit
# Version: 0.18.16146 (Git)
# Build type: Release
# Branch: (HEAD detached at 0.18.4)
# Hash: 980bf9060e28555fecd9e3462f68ca74007b70f8
# Python version: 3.6.7
# Qt version: 5.6.2
# Coin version: 4.0.0a
# OCC version: 7.3.0
# Locale: English/UnitedStates (en_US)
#
# *********************************************************
# *********************************************************
# *********************************************************

import PySide

if  'Ui_CamControlPanelUI' in dir():
    exec(
"""
class Form_CamControlPanel(PySide.QtGui.QDialog, Ui_CamControlPanelUI):
    pass
"""
    )
    
if 'Ui_StartGameControlDialogUI' in dir():
    exec(
"""    
class Form_StartGameControlDialog(PySide.QtGui.QDialog, Ui_StartGameControlDialogUI):
    pass
"""
    )

import FreeCAD
import FreeCADGui
from pivy import coin
from enum import Enum
import json
import math
import hashlib

CAMERA_LOCATIONS_OBJECTGROUP_NAME = "CamControl"
CAMCONTROL_GLOBAL_PARAM_GROUP_NAME = "User parameter:CamControl"
MOUSE_SENSITIVITY_MIN = 0.01
MOUSE_SENSITIVITY_MAX = 100
# these must be within range MOUSE_SENSITIVITY_MIN to MOUSE_SENSITIVITY_MAX
MOUSE_SENSITIVITY_SLIDER_LOGICAL_MIN = MOUSE_SENSITIVITY_MIN
MOUSE_SENSITIVITY_SLIDER_LOGICAL_MAX = MOUSE_SENSITIVITY_MAX


camdialog_ui_path = u"/Users/songsecure/OtherProjects/freecad/CamControl/CamControlPanelUI.ui"

countdowndialog_ui_path = u"/Users/songsecure/OtherProjects/freecad/CamControl/StartGameControlDialogUI.ui"

def centeredDialogRectInWindowForScreen(width, height, windowRect, screenRect):
    """
    :param int|Float width
    :param int|Float height
    :param PySide.QtCore.QRect windowRect
    :param PySide.QtCore.QRect screenRect
    :return PySide.QtCore.QRect

    returns rect centered in windowRect with given width and height
    subject to constraints that it lie within screenRect
    """
    if width > screenRect.width(): width = screenRect.width()
    if height > screenRect.height(): height = screenRect.height()
    x = windowRect.x() + (windowRect.width() - width) / 2
    y = windowRect.y() + (windowRect.height() - height) / 2
    if x < screenRect.x(): x = screenRect.x()
    if y < screenRect.y(): y = screenRect.y()
    ret = PySide.QtCore.QRect(x,y,width,height)
    return ret

# makes most sense if dictionary is one-to-one
def invertedDict(d):
    ret = dict()
    for key, value in d.items():
        ret[value] = key
    return ret

def map(inStart, inEnd, inValue, outStart, outEnd, bBound = True):
    ret = (inValue - inStart) / (inEnd - inStart) * (outEnd - outStart) + outStart
    if bBound:
        if ret < outStart:
            ret = outStart
        elif ret > outEnd:
            ret = outEnd
    return ret

def showErrorMessage(errorMessage):
    msgBox = PySide.QtGui.QMessageBox()
    msgBox.setText(errorMessage)
    msgBox.setIcon(PySide.QtGui.QMessageBox.Critical)
    msgBox.exec_()    

def withNoSignal(obj, f):
    bOld = obj.signalsBlocked()
    obj.blockSignals(True)
    f()
    obj.blockSignals(bOld)

def makeRotationAxisAngle(x, y, z, degrees):
    rad = degrees * 2 * math.pi / 360
    c = math.cos(rad/2)
    s = math.sin(rad/2)
    q = FreeCAD.Rotation(s*x,s*y,s*z,c)
    return q

def makeRotationPtAtUp(ptAt, up):
    rot = FreeCAD.Rotation(FreeCAD.Vector(), up, -ptAt, 'ZYX')
    return rot

# class is intended to be immutable
class BindableInput:
    class InvalidName(ValueError):
        pass

    _dictKeyValueToKey = None
    def getKeyValueToKeyDict():
        if BindableInput._dictKeyValueToKey == None:
            BindableInput._dictKeyValueToKey = dict()
            for key, value in PySide.QtCore.Qt.Key.values.items():
                if int(value) in BindableInput._dictKeyValueToKey:
                    print("duplicate key value ", int(value))
                else:
                    BindableInput._dictKeyValueToKey[int(value)] = value
        return BindableInput._dictKeyValueToKey
    # eo -- def getKeyValueToKeyDict():

    _inverseQtKeyValuesDict = None
    def getInverseQtKeyValuesDict():
        if BindableInput._inverseQtKeyValuesDict == None:
            BindableInput._inverseQtKeyValuesDict = invertedDict(PySide.QtCore.Qt.Key.values)
        return BindableInput._inverseQtKeyValuesDict

    _inverseQtMouseButtonValuesDict = None
    def getInverseQtMouseButtonValuesDict():
        if BindableInput._inverseQtMouseButtonValuesDict == None:
            BindableInput._inverseQtMouseButtonValuesDict = invertedDict(PySide.QtCore.Qt.MouseButton.values)
        return BindableInput._inverseQtMouseButtonValuesDict
    
    def __init__(self, key, mouseButton):
        """
        :param self
        :param PySide.QtCore.Qt.Key|None key
        :param PySide.QtCore.Qt.MouseButton|None mouseButton

        At most one of key, mouseButton can be non-None, both
        None is used to represent events that are not of a bindable input type
        """
        self.key = key
        self.mouseButton = mouseButton
        if (self.key != None) and (self.mouseButton != None):
            raise "key and mouseButton cannot both be non-None"

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        ret = self.key == other.key and self.mouseButton == other.mouseButton
        return ret

    def name(self):
        if self.key != None:
            return BindableInput.getInverseQtKeyValuesDict()[self.key]
        elif self.mouseButton != None:
            return BindableInput.getInverseQtMouseButtonValuesDict()[self.mouseButton]
        else:
            return "None"

    def FromName(name):
        if name == "None":
            return BindableInput( None, None)
        elif name in PySide.QtCore.Qt.Key.values:
            return BindableInput( PySide.QtCore.Qt.Key.values[name], None )
        elif name in PySide.QtCore.Qt.MouseButton.values:
            return BindableInput( None, PySide.QtCore.Qt.MouseButton.values[name] )
        else:
            raise BindableInput.InvalidName()

    def calcEventMatch(self, e):
        """
        :param self
        :param PySide.QtCore.QEvent e
        :return EventMatch 
        
        returns EventMatch indicating whether this BindableInput matches
        the event e, and if so, whether it is being Engaged or Disengaged
        """
        ret = EventMatch.NoMatch
        et = e.type()
        if et == PySide.QtCore.QEvent.MouseButtonPress or et == PySide.QtCore.QEvent.MouseButtonRelease:
            if e.button() == self.mouseButton:
                ret = EventMatch.Engaged if et == PySide.QtCore.QEvent.MouseButtonPress else EventMatch.Disengaged
        elif self.key != None and (et == PySide.QtCore.QEvent.KeyPress or et == PySide.QtCore.QEvent.KeyRelease):
            if e.key() == self.key:
                ret = EventMatch.Engaged if et == PySide.QtCore.QEvent.KeyPress else EventMatch.Disengaged
        return ret
    # eo -- def calcEventMatch(e):
 # eo -- class BindableInput

class Settings:
    # see the SettingsSerialization class
    # for the string keys for the corresponding FreeCAD Paramater values

    DEFAULT_DONT_SHOW_START_GAME_CONTROL_DIALOG = False 
    DEFAULT_INVERT_MOUSE_Y = False
    DEFAULT_MOUSE_SENSITIVITY = 1.0

    # the key strings appear as labels in the SettingsDialog
    BIND_START_GAME_CONTROL_KEY = "Start Game Control"
    BIND_END_GAME_CONTROL_KEY = "End Game Control"
    BIND_MOVE_FORWARD_KEY = "Forward"
    BIND_MOVE_BACKWARD_KEY = "Back"
    BIND_MOVE_RIGHT_KEY = "Right"
    BIND_MOVE_LEFT_KEY = "Left"
    BIND_MOVE_UP_KEY = "Up"
    BIND_MOVE_DOWN_KEY = "Down"
    BIND_MOVE_ROT_COUNTER_CLOCKWISE_KEY = "Counter-clockwise"
    BIND_MOVE_ROT_CLOCKWISE_KEY = "Clockwise"
    BIND_MOVE_SCALE_INCREASE_KEY = "Increase speed"
    BIND_MOVE_SCALE_DECREASE_KEY = "Decrease speed"

    ORDERED_BINDINGS_KEYS = [ BIND_START_GAME_CONTROL_KEY, BIND_END_GAME_CONTROL_KEY, BIND_MOVE_FORWARD_KEY, BIND_MOVE_BACKWARD_KEY, BIND_MOVE_RIGHT_KEY, BIND_MOVE_LEFT_KEY, BIND_MOVE_UP_KEY, BIND_MOVE_DOWN_KEY, BIND_MOVE_ROT_COUNTER_CLOCKWISE_KEY, BIND_MOVE_ROT_CLOCKWISE_KEY, BIND_MOVE_SCALE_INCREASE_KEY, BIND_MOVE_SCALE_DECREASE_KEY ]

    DEFAULT_INPUT_BINDINGS_DICT = {
        BIND_START_GAME_CONTROL_KEY: BindableInput(None, None), \
        BIND_END_GAME_CONTROL_KEY: BindableInput(PySide.QtCore.Qt.Key_M, None), \
        BIND_MOVE_FORWARD_KEY: BindableInput(None, PySide.QtCore.Qt.LeftButton), \
        BIND_MOVE_BACKWARD_KEY: BindableInput(None, PySide.QtCore.Qt.RightButton), \
        BIND_MOVE_LEFT_KEY: BindableInput(PySide.QtCore.Qt.Key_S, None), \
        BIND_MOVE_RIGHT_KEY: BindableInput(PySide.QtCore.Qt.Key_F, None), \
        BIND_MOVE_UP_KEY: BindableInput(PySide.QtCore.Qt.Key_E, None), \
        BIND_MOVE_DOWN_KEY: BindableInput(PySide.QtCore.Qt.Key_D, None), \
        BIND_MOVE_ROT_CLOCKWISE_KEY: BindableInput(PySide.QtCore.Qt.Key_G, None), \
        BIND_MOVE_ROT_COUNTER_CLOCKWISE_KEY: BindableInput(PySide.QtCore.Qt.Key_T, None), \
        BIND_MOVE_SCALE_INCREASE_KEY: BindableInput(PySide.QtCore.Qt.Key_Q, None), \
        BIND_MOVE_SCALE_DECREASE_KEY: BindableInput(PySide.QtCore.Qt.Key_A, None) \
    }

    def __init__(self):
        self.resetDefaults()
        self.rebuildBoundInputList()

    def rebuildBoundInputList(self):
        self.inputBindingDict = Settings.DEFAULT_INPUT_BINDINGS_DICT.copy()

    def resetDefaults(self):
        self.DONT_SHOW_START_GAME_CONTROL_DIALOG = Settings.DEFAULT_DONT_SHOW_START_GAME_CONTROL_DIALOG
        self.INVERT_MOUSE_Y = Settings.DEFAULT_INVERT_MOUSE_Y
        self.MOUSE_SENSITIVITY = Settings.DEFAULT_MOUSE_SENSITIVITY
        self.inputBindingDict = Settings.DEFAULT_INPUT_BINDINGS_DICT.copy()
    # eo -- def resetDefaults(self):

    def copy(self):
        other = Settings()
        other.DONT_SHOW_START_GAME_CONTROL_DIALOG = self.DONT_SHOW_START_GAME_CONTROL_DIALOG
        other.INVERT_MOUSE_Y = self.INVERT_MOUSE_Y
        other.MOUSE_SENSITIVITY = self.MOUSE_SENSITIVITY
        other.inputBindingDict = self.inputBindingDict.copy()
        return other

    def copyFrom(self, other):
        self.DONT_SHOW_START_GAME_CONTROL_DIALOG = other.DONT_SHOW_START_GAME_CONTROL_DIALOG
        self.INVERT_MOUSE_Y = other.INVERT_MOUSE_Y
        self.MOUSE_SENSITIVITY = other.MOUSE_SENSITIVITY
        self.inputBindingDict = other.inputBindingDict.copy()

# eo -- class Settings:

class SettingsSerialization:
    # tuple Param Type, Paramater Name; for Float:  MINIMUM, MAXIMUM, DEFAULT
    ParamaterNamesDict = { \
        "DONT_SHOW_START_GAME_CONTROL_DIALOG": ("Bool", "Don't Show Start Game Control Dialog"),\
        "INVERT_MOUSE_Y": ("Bool", "Game Control: Invert Mouse Y"),\
        "MOUSE_SENSITIVITY": ("Float", "Game Cotrol Mouse Sensitivity", MOUSE_SENSITIVITY_MIN, MOUSE_SENSITIVITY_MAX, Settings.DEFAULT_MOUSE_SENSITIVITY),\
        Settings.BIND_START_GAME_CONTROL_KEY: ("InputBinding", "Game Cotrol: Start Game Control"),\
        Settings.BIND_END_GAME_CONTROL_KEY: ("InputBinding", "Game Cotrol: End Game Control"),\
        Settings.BIND_MOVE_FORWARD_KEY: ("InputBinding", "Game Cotrol: Move Forward"),\
        Settings.BIND_MOVE_BACKWARD_KEY: ("InputBinding", "Game Cotrol: Move Backward"),\
        Settings.BIND_MOVE_LEFT_KEY: ("InputBinding", "Game Cotrol: Move Left"),\
        Settings.BIND_MOVE_RIGHT_KEY: ("InputBinding", "Game Cotrol: Move Right"),\
        Settings.BIND_MOVE_UP_KEY: ("InputBinding", "Game Cotrol: Move Up"),\
        Settings.BIND_MOVE_DOWN_KEY: ("InputBinding", "Game Cotrol: Move Down"),\
        Settings.BIND_MOVE_ROT_CLOCKWISE_KEY: ("InputBinding", "Game Cotrol: Rotate Clockwise"),\
        Settings.BIND_MOVE_ROT_COUNTER_CLOCKWISE_KEY: ("InputBinding", "Game Cotrol: Rotater Counter-Clockwise"),\
        Settings.BIND_MOVE_SCALE_INCREASE_KEY: ("InputBinding", "Game Cotrol: Increase Move Speed"),\
        Settings.BIND_MOVE_SCALE_DECREASE_KEY: ("InputBinding", "Game Cotrol: Decrease Move Speed")
        }

    def __init__(self, settings):
        """
        :param self
        :param Settings settings
        """
        self.settings = settings

    def readInputBindingSetting(self, paramGroup, inputBindingKey, settingName):
        try:
            boundInputName = paramGroup.GetString(settingName)
            bi = BindableInput.FromName(boundInputName)
            self.settings.inputBindingDict[inputBindingKey] = bi
        except BindableInput.InvalidName:
            pass

    def read(self):
        # the param group is created if it doesnt already exist
        p = FreeCAD.ParamGet(CAMCONTROL_GLOBAL_PARAM_GROUP_NAME)
        # paramaters within the group are created if they dont exist
        # FreeCAD gives defaults:  Bool -> False, Float -> 0, String -> "" 
        for s, info in SettingsSerialization.ParamaterNamesDict.items():
            if info[0] == "Bool":
                setattr(self.settings, s, p.GetBool(info[1]))
            elif info[0] == "Float":
                x = p.GetFloat(info[1])
                if x < info[2] or x > info[3]:
                    x = info[4]
                setattr(self.settings, s, x)
            elif info[0] == "InputBinding":
                self.readInputBindingSetting(p, s, info[1])
            else: # bug
                raise Exception()
    # eo -- def read(self):

    def save(self):
        # the param group is created if it doesnt already exist
        p = FreeCAD.ParamGet(CAMCONTROL_GLOBAL_PARAM_GROUP_NAME)
        for s, info in SettingsSerialization.ParamaterNamesDict.items():
            if info[0] == "Bool":
                p.SetBool(info[1], getattr(self.settings, s))
            elif info[0] == "Float":
                p.SetFloat(info[1], getattr(self.settings, s))
            elif info[0] == "InputBinding":
                bi = self.settings.inputBindingDict[s]
                p.SetString(info[1], bi.name())
            else: # bug
                raise Exception()
        FreeCAD.saveParameter("User parameter")
    # eo -- def save(self):

class CameraType(Enum):
    Orthographic = "Orthographic"
    Perspective = "Perspective"

    def fromString(s):
        for camType in CameraType:
            if camType.value == s:
                return camType
        raise Exception()

    def values():
        ret = list()
        for camType in CameraType:
            ret.append(camType.value)
        return ret

class CameraState(PySide.QtCore.QObject):
    changed = PySide.QtCore.Signal()
    positionChanged = PySide.QtCore.Signal(FreeCAD.Vector)
    orientationChanged = PySide.QtCore.Signal(FreeCAD.Placement)
    # using CameraType as type of argument causing crash (v 0.18.4)
    cameraTypeChanged = PySide.QtCore.Signal(str)

    @property
    def placement(self):
        return FreeCAD.Placement(self._placement)

    @placement.setter
    def placement(self, newValue):
        if newValue != self._placement:
            temp = CameraState(newValue, self._cameraType)
            self.set(temp)

    @property
    def cameraType(self):
        return self._cameraType

    @cameraType.setter
    def cameraType(self, newValue):
        if newValue != self._cameraType:
            temp = CameraState(self._placement, newValue)
            self.set(temp)

    def __init__(self, placement, cameraType):
        """
        :param self
        :param FreeCAD.Placement placement
        :param CameraType cameraType
        """
        super().__init__()
        self._placement = FreeCAD.Placement(placement)
        self._cameraType = cameraType
        self.signalTimer = None
        self.setSignalDelay(0)

    def setSignalDelay(self, msDelay): 
        if msDelay <= 0:
            if self.signalTimer != None:
                self.signalTimer.stop()
                self.signalTimer = None
                self.onSignalTimer()
        else:
            self.signalTimer = PySide.QtCore.QTimer()
            self.signalTimer.timeout.connect(self.onSignalTimer)
            self.signalTimer.start(msDelay)
        self.delayedPositionChanged = self.delayedOrientationChanged = self.delayedCameraTypeChanged = self.delayedChanged = True

    def onSignalTimer(self):
        if self.delayedPositionChanged:
            self.delayedPositionChanged = False
            self.emitPositionChanged()
        if self.delayedOrientationChanged:
            self.delayedOrientationChanged = False
            self.emitOrientationChanged()
        if self.delayedCameraTypeChanged:
            self.delayedCameraTypeChanged = False
            self.emitCameraTypeChanged()
        if self.delayedChanged:
            self.delayedChanged = False
            self.emitChanged()

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        ret = self._placement == other._placement and self._cameraType == other._cameraType
        return ret

    def copy(self):
        ret = CameraState(self._placement, self._cameraType)
        return ret

    def setPosition(self, pos):
        self.placement = FreeCAD.Placement(pos, self._placement.Rotation)

    def setRotation(self, rot):
        self.placement = FreeCAD.Placement(self._placement.Base, rot)

    def pointAt(self, ptAt, up):
        """
        :param self
        :param FreeCAD.Vector ptAt
        :param FreeCAD.Vector up
        """
        rot = makeRotationPtAtUp(ptAt, up)
        self.setRotation(rot)

    def getCamRotAxes(self):
        #-- tuple of normalized X, Y, Z, axes
        #-- where Z is in direction camera is looking, Y is up, and X is determined
        #-- by Y x Z , since standard camera looks towards -z with y up
        #-- the viewed direction camera looks is result of rotation * (std -z unit vec)
        #-- the viewed up direction is rotation * (std y unit vec)
        #-- and the cross will be rotation * (std -x unit vec)
        
        rot = self._placement.Rotation
        xAx = rot.multVec(FreeCAD.Vector(-1,0,0))
        yAx = rot.multVec(FreeCAD.Vector(0,1,0))
        zAx = rot.multVec(FreeCAD.Vector(0,0,-1))
        return (xAx,yAx,zAx)
    # eo -- getCamRotAxes

    def emitPositionChanged(self):
        self.positionChanged.emit(self.placement.Base)

    def emitOrientationChanged(self):
        self.orientationChanged.emit(self.placement.Rotation)

    def emitCameraTypeChanged(self):
        self.cameraTypeChanged.emit(self._cameraType.value)

    def emitChanged(self):
        self.changed.emit()

    def set(self, other):
        if self != other:
            positionChanged = self._placement.Base != other._placement.Base
            orientationChanged = self._placement.Rotation != other._placement.Rotation
            cameraTypeChanged = self._cameraType != other._cameraType
            self._placement = FreeCAD.Placement( other._placement )
            self._cameraType = other._cameraType

            if self.signalTimer == None:
                if positionChanged:
                    self.emitPositionChanged()
                if orientationChanged:
                    self.emitOrientationChanged()
                if cameraTypeChanged:
                    self.emitCameraTypeChanged()
                self.emitChanged()
            else:
                self.delayedPositionChanged = positionChanged
                self.delayedOrientationChanged = orientationChanged
                self.delayedCameraTypeChanged = cameraTypeChanged
                self.delayedChanged = True
    # eo -- def set(self, other):
# eo -- class CameraState(PySide.QtCore.QObject):

class CameraRecord:
    def __init__(self, name, label, camState):
        """
        :param self
        :param str name
        :param str label
        :param CameraState camState
        """
        self.name = name
        self.label = label
        self.camState = camState

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        ret = self.name == other.name and self.label == other.label and self.camState == other.camState
        return ret
# eo -- class CameraRecord:        

class CamerasSerializationException(Exception):
    pass

class CamerasSerializationGroupObjectWrongTypeIdException(CamerasSerializationException):
    """
    The Document Scene Graph contains an object with the name
    we use to save camera locations, and it is not of the type
    we use for saving
    """
    pass

class CamerasSerialization:
    def __init__(self, doc, objectGroupName):
        self.doc = doc
        self.objectGroupName = objectGroupName
        self.camRecordList = []
        self.readCamRecords()

    # private
    def sortCamRecords(self):
        self.camRecordList.sort(key=lambda x: x.label)

    # private
    def readCamRecords(self):
        objGroup = self.doc.getObject(self.objectGroupName)
        if objGroup != None:
            objLocations = objGroup.Group
            for obj in objLocations:
                if obj.TypeId == "App::FeaturePython" and hasattr(obj, "Placement") and hasattr(obj, "CameraType"):
                    c = obj.CameraType
                    try:
                        c = CameraType.fromString(c)
                    except:
                        continue

                    # if c == CameraType.Orthographic.value:
                    #     c = CameraType.Orthographic
                    # elif c == CameraType.Perspective.value:
                    #     c = CameraType.Perspective
                    # else:
                    #     continue

                    camRec = CameraRecord(obj.Name, obj.Label, CameraState(obj.Placement, c))
                    self.camRecordList.append(camRec)
            self.sortCamRecords()        
    # eo -- def readCamRecords(self):

    # private
    def findCamRecordIndexByName(self, name):
        N = len(self.camRecordList)
        for k in range(N):
            if self.camRecordList[k].name == name:
                return k
        return None

    # public
    def deleteCamRecord(self, index):
        camRec = self.camRecordList.pop(index)
        self.doc.removeObject(camRec.name)

    # public
    def saveCamRecord(self, camRec, isNewRecord):
        """
        :param CameraRecord camRec
        :param bool isNewRecord
        :return int
        :raises CamerasSerializationGroupObjectWrongTypeIdException

        camRec is camera record to be inserted or saved
        isNewRecord indicates if this is a new record or update of an existing record
        returns index in list of camRec

        used for inserting into list, editing list entry

        note -- camRec.name can be altered by this method
        """
        obj = None
        if not isNewRecord:
            obj = self.doc.getObject(camRec.name)
            obj.Label = camRec.label
        if obj == None or obj.TypeId != "App::FeaturePython":
            obj = self.doc.addObject("App::FeaturePython", camRec.name, camRec.label)
            # if camRec.name is already used by another object
            # it's automatically changed, so get the actual name
            camRec.name = obj.Name
        camRec.label = obj.Label
        if not hasattr(obj, "Placement"):
            obj.addProperty("App::PropertyPlacement", "Placement")
        obj.Placement = camRec.camState.placement
        if not hasattr(obj, "CameraType"):
            obj.addProperty("App::PropertyEnumeration", "CameraType")
            # PropertyEnumeration attributes can be set to lists or one of its strings
            obj.CameraType = CameraType.values()
        obj.CameraType = camRec.camState.cameraType.value
        objGroup = self.doc.getObject(self.objectGroupName)
        if objGroup == None:
            objGroup = self.doc.addObject("App::DocumentObjectGroup", self.objectGroupName)
        if objGroup.TypeId != "App::DocumentObjectGroup":
            raise CamerasSerializationGroupObjectWrongTypeIdException()
        # adding an object already in the group has no effect
        objGroup.addObject(obj)

        k = self.findCamRecordIndexByName(camRec.name)
        if k == None:
            self.camRecordList.append(camRec)
        self.sortCamRecords()
        k = self.findCamRecordIndexByName(camRec.name)
        return k
    # eo -- def saveCamRecord(self, camRec, isNewRecord):
# eo -- class CamerasSerialization:

class TaskStandardButtons(Enum):
    NoButton           = 0x00000000
    Ok                 = 0x00000400
    Save               = 0x00000800
    SaveAll            = 0x00001000
    Open               = 0x00002000
    Yes                = 0x00004000
    YesToAll           = 0x00008000
    No                 = 0x00010000
    NoToAll            = 0x00020000
    Abort              = 0x00040000
    Retry              = 0x00080000
    Ignore             = 0x00100000
    Close              = 0x00200000
    Cancel             = 0x00400000
    Discard            = 0x00800000
    Help               = 0x01000000
    Apply              = 0x02000000
    Reset              = 0x04000000
    RestoreDefaults    = 0x08000000
# eo -- class TaskStandardButtons(Enum):

class EventMatch(Enum):
    NoMatch = 1
    Engaged = 2
    Disengaged = 3

# to generate sequence 1, 3, 10, 30, 100, 300, ....
# sometimes used as a scale, other times as a speed 
class GameControlMoveScale(PySide.QtCore.QObject):

    valueChanged = PySide.QtCore.Signal(float)
    
    def __init__(self, factors10, level):
        """
        :param self
        :param int factors10
        :param int level

        factors10 is non-negative
        level can be 1 or 3
        represents a scaling of level * 10^factors10
        """
        super().__init__()
        self.factors10 = factors10
        self.level = level

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        ret = self.factors10 == other.factors10 and self.level == other.level
        return ret

    def increaseScale(self):
        if self.level == 1:
            self.level = 3
        else:
            self.level = 1
            self.factors10 = self.factors10 + 1
        self.emitValueChangedSignal()

    def decreaseScale(self):
        ret = True
        if self.level == 3:
            self.level = 1
        elif self.factors10 > 0:
            self.factors10 = self.factors10 - 1
            self.level = 3
        else:
            ret = False
        if ret:
            self.emitValueChangedSignal()
        return ret

    def emitValueChangedSignal(self):
        self.valueChanged.emit(self.value())

    def value(self):
        ret = self.level * ( 10 ** self.factors10 )
        return ret
# eo - class GameControlMoveScale:

class StartGameControlDialog(PySide.QtGui.QDialog):

    cancelPressed = PySide.QtCore.Signal()
    startPressed = PySide.QtCore.Signal()
    dontShowAgainChanged = PySide.QtCore.Signal(bool)

    def __init__(self, inputToExit):
        super().__init__()
        self.inputToExit = inputToExit

        if 'Form_StartGameControlDialog' in dir():
            self.form = Form_StartGameControlDialog()
            self.form.setupUi(self.form)
        else:
            self.form = FreeCADGui.PySideUic.loadUi(countdowndialog_ui_path)
        self.initUI()

    # private
    def initUI(self):
        self.mainVertLayout = PySide.QtGui.QVBoxLayout() 
        self.setLayout(self.mainVertLayout)
        self.setModal(True)
        self.mainVertLayout.addWidget(self.form)
        self.setWindowTitle("CamControl: Start Game Control")        
        self.form.InputToExitLabel.setText(self.inputToExit)
        self.form.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)
        self.form.StartPushButton.clicked.connect(self.onStartPushButtonClicked)
        self.form.StartPushButton.setDefault(True)
        self.form.StartPushButton.setAutoDefault(True)
        self.form.CancelPushButton.clicked.connect(self.onCancelPushButtonClicked)
        self.form.CancelPushButton.setDefault(False)
        self.form.CancelPushButton.setAutoDefault(False)
        self.form.DontShowAgainCheckBox.stateChanged.connect(self.onDontShowAgainCheckBoxStateChanged)
        r = centeredDialogRectInWindowForScreen(self.form.width(), self.form.height(), FreeCAD.Gui.getMainWindow().geometry(), PySide.QtGui.QApplication.desktop().screenGeometry())
        self.setGeometry(r)
        self.show()

    # private
    def onCancelPushButtonClicked(self):
        self.form.close()
        self.cancelPressed.emit()

    # private
    def onStartPushButtonClicked(self):
        self.form.close()
        self.startPressed.emit()

    # private
    def onDontShowAgainCheckBoxStateChanged(self):
        self.dontShowAgainChanged.emit(self.form.DontShowAgainCheckBox.isChecked())

    # override
    def close(self):
        super().close()
        
# eo -- class StartGameControlDialog(PySide.QtGui.QMainWindow):

class CustomLineEdit(PySide.QtGui.QLineEdit):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ignoreMouseButton = True
        self.selectionChanged.connect(lambda: self.deselect())

    def focusInEvent(self, e):
        super().focusInEvent(e)
        self.setStyleSheet("QLineEdit { background-color: #d8d8ff; }")

    def focusOutEvent(self, e):
        super().focusOutEvent(e)
        self.setStyleSheet("")
        self.ignoreMouseButton = True

    def contextMenuEvent(self, e):
        pass

class SettingsDialog(PySide.QtGui.QDialog):

    okClicked = PySide.QtCore.Signal()
    cancelClicked = PySide.QtCore.Signal()

    MOUSE_SENSITIVITY_SLIDER_INPUT_MIN = 0
    MOUSE_SENSITIVITY_SLIDER_INPUT_MAX = 100
    MOUSE_SENSITIVITY_SPIN_MIN = MOUSE_SENSITIVITY_MIN
    MOUSE_SENSITIVITY_SPIN_MAX = MOUSE_SENSITIVITY_MAX

    def __init__(self, settings):
        super().__init__()
        self.settings = settings
        self.initUI()

    def setUIValuesFromSettings(self):
        withNoSignal(self.showStartGameControlDialogCheckbox, lambda: self.showStartGameControlDialogCheckbox.setChecked(not self.settings.DONT_SHOW_START_GAME_CONTROL_DIALOG))
        withNoSignal(self.invertMouseYCheckBox, lambda: self.invertMouseYCheckBox.setChecked(self.settings.INVERT_MOUSE_Y))
        withNoSignal(self.mouseSensitivitySpinBox, lambda: self.mouseSensitivitySpinBox.setValue(self.settings.MOUSE_SENSITIVITY))
        # this will set self.mouseSensitivitySlider
        self.mouseSensitivitySpinBox.valueChanged.emit(self.settings.MOUSE_SENSITIVITY)
        for key in self.settings.inputBindingDict:
            bi = self.settings.inputBindingDict[key]
            editor = self.boundInputEditor[key]
            withNoSignal(editor, lambda:editor.setText(bi.name()))

    def setSettingsFromUIValues(self):
        self.settings.DONT_SHOW_START_GAME_CONTROL_DIALOG = not self.showStartGameControlDialogCheckbox.isChecked()
        self.settings.INVERT_MOUSE_Y = self.invertMouseYCheckBox.isChecked()
        self.settings.MOUSE_SENSITIVITY = self.mouseSensitivitySpinBox.value()
        for key in self.settings.inputBindingDict:
            editor = self.boundInputEditor[key]
            name = editor.text()
            try:
                bi = BindableInput.FromName(name)
                self.settings.inputBindingDict[key] = bi
            except BindableInput.InvalidName:
                print("unexpected BindableInput.InvalidName")

    def onMouseSensitivitySpinBoxvalueChanged(self, newValue):
        if newValue > 0:
            log10Value = math.log10(newValue)
            inputValue = map(math.log10(MOUSE_SENSITIVITY_SLIDER_LOGICAL_MIN), math.log10(MOUSE_SENSITIVITY_SLIDER_LOGICAL_MAX), log10Value, SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MIN, SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MAX)
            withNoSignal(self.mouseSensitivitySlider, lambda:self.mouseSensitivitySlider.setValue(inputValue))
        else:
            print("unexpected non-positive mouse sensitivty spin box value")

    def onMouseSensitivitySliderVvalueChanged(self, newValue):
        log10Value = map(SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MIN, SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MAX, newValue, math.log10(MOUSE_SENSITIVITY_SLIDER_LOGICAL_MIN), math.log10(MOUSE_SENSITIVITY_SLIDER_LOGICAL_MAX))
        sensitivity = 10.0 ** log10Value
        withNoSignal(self.mouseSensitivitySpinBox, lambda:self.mouseSensitivitySpinBox.setValue(sensitivity))
    
    def onOkButtonClicked(self):
        self.setSettingsFromUIValues()
        self.okClicked.emit()

    def reject(self):
        self.onCancelButtonClicked()

    def onCancelButtonClicked(self):
        self.cancelClicked.emit()

    def onResetToDefaultsButtonClicked(self):
        self.settings.resetDefaults()
        self.setUIValuesFromSettings()

    def initUI(self):
        self.mainVertLayout = PySide.QtGui.QVBoxLayout() 
        self.setLayout(self.mainVertLayout)
        self.setModal(True)

        scroll = PySide.QtGui.QScrollArea()   
        widget = PySide.QtGui.QWidget() 
        scroll.setWidget(widget)
        self.scrollVertLayout = PySide.QtGui.QVBoxLayout() 
        widget.setLayout(self.scrollVertLayout)
        scroll.setVerticalScrollBarPolicy(PySide.QtCore.Qt.ScrollBarAlwaysOn)
        scroll.setHorizontalScrollBarPolicy(PySide.QtCore.Qt.ScrollBarAlwaysOff)
        scroll.setWidgetResizable(True)
        self.mainVertLayout.addWidget(scroll)

        hLayout = PySide.QtGui.QHBoxLayout()
        resetButton = PySide.QtGui.QPushButton("Reset to Defaults")
        resetButton.setDefault(False)
        resetButton.setAutoDefault(False)
        hLayout.addWidget(resetButton)
        cancelButton = PySide.QtGui.QPushButton("Cancel")
        cancelButton.setDefault(False)
        cancelButton.setAutoDefault(False)
        hLayout.addWidget(cancelButton)
        okButton = PySide.QtGui.QPushButton("OK")
        okButton.setDefault(True)
        hLayout.addWidget(okButton)
        widget = PySide.QtGui.QWidget()
        widget.setObjectName("test") # settings background color isnt working
        widget.setStyleSheet("QWidget#test { background-color: #a0a0a0; }")
        widget.setLayout(hLayout)
        self.mainVertLayout.addWidget(widget)

        label = PySide.QtGui.QLabel("Game Control Settings")
        label.setStyleSheet("QLabel { font:bold; font-size:18pt; }")
        self.scrollVertLayout.addWidget(label)

        self.showStartGameControlDialogCheckbox = PySide.QtGui.QCheckBox("Show Start Game Control Dialog")
        self.scrollVertLayout.addWidget(self.showStartGameControlDialogCheckbox)

        self.invertMouseYCheckBox = PySide.QtGui.QCheckBox("Invert Mouse Y")
        self.scrollVertLayout.addWidget(self.invertMouseYCheckBox)

        label = PySide.QtGui.QLabel("Mouse Sensitivity")
        label.setStyleSheet("QLabel { font:bold;  }")
        self.scrollVertLayout.addWidget(label)
        hLayout = PySide.QtGui.QHBoxLayout()
        self.scrollVertLayout.addLayout(hLayout)
        self.mouseSensitivitySpinBox = PySide.QtGui.QDoubleSpinBox()
        self.mouseSensitivitySpinBox.setMinimum(SettingsDialog.MOUSE_SENSITIVITY_SPIN_MIN)
        self.mouseSensitivitySpinBox.setMaximum(SettingsDialog.MOUSE_SENSITIVITY_SPIN_MAX)
        hLayout.addWidget(self.mouseSensitivitySpinBox)

        self.mouseSensitivitySlider = PySide.QtGui.QSlider(PySide.QtCore.Qt.Orientation.Horizontal)
        self.mouseSensitivitySlider.setMinimum(SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MIN)
        self.mouseSensitivitySlider.setMaximum(SettingsDialog.MOUSE_SENSITIVITY_SLIDER_INPUT_MAX)
        hLayout.addWidget(self.mouseSensitivitySlider)

        label = PySide.QtGui.QLabel("Input Bindings")
        label.setStyleSheet("QLabel { font:bold;  }")
        self.scrollVertLayout.addWidget(label)
        formLayout = PySide.QtGui.QFormLayout()
        self.scrollVertLayout.addLayout(formLayout)
        self.boundInputEditor = dict()
        for key in Settings.ORDERED_BINDINGS_KEYS:
            bi = self.settings.inputBindingDict[key]
            prompt = PySide.QtGui.QLabel(key)
            editor = CustomLineEdit()
            editor.setReadOnly(True)
            self.boundInputEditor[key] = editor
            editor.installEventFilter(self)
            formLayout.addRow(prompt, editor)

        okButton.clicked.connect(self.onOkButtonClicked)
        cancelButton.clicked.connect(self.onCancelButtonClicked)
        resetButton.clicked.connect(self.onResetToDefaultsButtonClicked)
        self.mouseSensitivitySpinBox.valueChanged.connect(self.onMouseSensitivitySpinBoxvalueChanged)
        self.mouseSensitivitySlider.valueChanged.connect(self.onMouseSensitivitySliderVvalueChanged)

        r = centeredDialogRectInWindowForScreen(380, 420, FreeCAD.Gui.getMainWindow().geometry(), PySide.QtGui.QApplication.desktop().screenGeometry())
        self.setGeometry(r)
        self.setWindowTitle('CamControl:  Settings')
        self.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint)

        self.setUIValuesFromSettings()

        self.show()
    # eo -- def initUI(self):

    def eventFilter(self, source, event):
        if source.hasFocus():
            et = event.type()
            if et == PySide.QtCore.QEvent.MouseButtonPress:
                if not source.ignoreMouseButton:
                    source.setText(event.button().name.decode("utf-8"))
                    source.clearFocus()
                    return True
                else:
                    source.ignoreMouseButton = False
            elif et == PySide.QtCore.QEvent.KeyPress:
                if event.key() != PySide.QtCore.Qt.Key_Meta:
                    if event.key() != PySide.QtCore.Qt.Key_Backspace:
                        dictKeyValueToKey = BindableInput.getKeyValueToKeyDict()
                        if event.key() in dictKeyValueToKey:
                            keyObj = dictKeyValueToKey[event.key()]
                            source.setText(keyObj.name.decode("utf-8"))
                            source.clearFocus()
                            return True
                        else:
                            print("unknown key value: ", event.key())
                    else:
                        source.setText(BindableInput(None, None).name())
                        source.clearFocus()
                        return True

        # eo - if source.hasFocus():
        return source.eventFilter(source, event)
    # eo -  def eventFilter(self, source, event):

# eo -- class SettingsDialog(PySide.QtGui.QMainWindow):

class HelpDialog(PySide.QtGui.QDialog):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        mainVertLayout = PySide.QtGui.QVBoxLayout() 
        self.setLayout(mainVertLayout)
        self.setModal(True)

        textBrowser = PySide.QtGui.QTextBrowser()
        mainVertLayout.addWidget(textBrowser)
        textBrowser.setHtml(
        """
        <head>
           <title>CamControl</title>
           <style>
             body, dl { margin: 20px; }
             table{
             width:80%;
             margin:30px auto;
             border-collapse:collapse;
             }
             th, td{
             padding: 30px;
             border: 1px solid #666;
             }
             dt { font-weight: bold;}
           </style>
         </head>
        <body>
            <h1>CamControl</h1>
            <p>by k0nichiwa</p>
            <p>version 0.10</p>
            <p>June, 2020</p>
            <h2>Purpose:</h2>
            <font size=4>
            <ul>
                <li>Video-game like control of camera position and orientation</li>
                <li>Save a list of camera locations for each document</li>
                <li>Task Panel control of camera position and orientation</li>
                <li>Customize key and mouse bindings during Game Control of camera</li>
            </ul>
            </font>
            <h2>Game Control</h2>
            <font size=4>
                <ul>
                    <li>
                        Active when the Game Control Checkbox checked,
                         best with camera in Perspective mode
                    </li>
                    <li>
                        <b>Once active, you may not be able to uncheck the Checkbox to exit.</b>
                        By default the mouse buttons are bound to forward/backward movement.  <b>Instead
                        use the key binding to exit Game Control, by default 'M'.</b>
                    </li>
                    <li>
                        <b>Mouse bindings</b>
                        <dl>
                            <dt>Move mouse up/down</dt><dd> changes camera orientation "pitch"</dd>
                            <dt>Move mouse left/right</dt><dd> changes camera orientation "yaw"</dd>
                            <dt>Left, Right mouse button (default)</dt><dd> move forward/backward</dd>
                        </dl>
                    </li>
                    <li>
                        <b>Default input bindings</b>
                        <br>
                        <table cellspacing=0 cellpadding=30px style='border-width: 1px; border-style: solid; border-color: #666'>
                          <tr>
                            <td>Q</td><td></td><td>E</td><td></td><td>T</td><td></td><td></td><td></td>
                          </tr>
                          <tr>
                            <td>A</td><td>S</td><td>D</td><td>F</td><td>G</td><td></td><td></td><td></td>
                          </tr>
                          <tr>
                            <td></td><td></td><td></td><td></td><td></td><td></td><td>M</td><td></td>
                          </tr>
                        </table>
                        <br>
                        <dl>
                            <dt>M</dt><dd><b>Exit Game Control</b></dd>
                            <dt>Q - A</dt><dd>increase, decrease movment speed (displayed in Task Panel to right of Game Control checkbox)</dd>
                            <dt>S - F</dt><dd>move camera left - right</dd>
                            <dt>E - D</dt><dd> move camera up - down</dd>
                            <dt>T - G</dt><dd> change camera orientation "roll" rotating counter-clockwise - clockwise</dd>
                        </dl>
                    </li>
                    <li>
                        <b>Default input bindings may not work on your system.
                        Input bindings can be changed using the "Settings" button.</b>
                    </li>
                    <li>
                        <b>It's possible to bind an input to start Game Control</b>.  This
                        can be useful to quickly reposition the mouse pointer if it
                        reaches the edge of the screen or application.  In this case, stop Game Control,
                        recenter the mouse, and then restart Game Control and continue.
                    </li>
                </ul>
            </font>
            <br>
            <h2>Other UI Controls</h2>
            <font size=4>
                <dl>
                    <dt>Help Button</dt>
                    <dd>
                        Shows this help screen
                    </dd>
                    <dt>Cancel Button</dt>
                    <dd>
                        Exit Task Panel returning the camera to its previous configuration
                    </dd>
                    <dt>Ok Button</dt>
                    <dd>
                        Exit Task Panel keeping the current camera configuration
                    </dd>
                    <dt>ReRead</dt>
                    <dd>
                        You can maniuplate the camera configuration using
                        standard FreeCAD UI elements (such as Fit All, Front View, Top View, etc).  In this
                        case, click the ReRead button to make CamControl aware
                        of the new camera configuration.
                    </dd>
                    <dt>Settings</dt>
                    <dd>
                        Opens the Settings Dialog in which you can customize input bindings.  You
                        can bind an input to start Game Control.
                    </dd>
                    <dt>Saved</dt>
                    <dd>
                        In this section you can save the camera location using the "Ins" Button.  You
                        can manage the list of saved camera locations using "Del" and "Rename".  "Update" changes the selected camera location to the
                        current location.
                        Select a previously saved location using the Combo-Box.  <b> Note:</b>  Camera locations
                        are added to the Document Scene Graph, and are not saved to disk until
                        the Document itself is saved;  CamControl will not save the Document, you must
                        do this manually if you want to save camera locations to disk.
                    </dd>
                    <dt>Type</dt>
                    <dd>
                        Orthographic or Perspective.  <b>Note:</b> Game Control works best in Perspective mode
                    </dd>
                    <dt>Position</dt>
                    <dd>
                        Camera location
                    </dd>
                    <dt>Direction Point At/Up</dt>
                    <dd>
                        Camera orientation.  "PtAt" is direction camera points, "Up" is direction which maps
                        to the postive y direction in the view (automatically adjusted to keep orthogonal).
                    </dd>
                    <dt>Direction Angles</dt>
                    <dd>
                        Camera orientation using Tait-Bryan angles.  The "0" Button makes the current
                        camera orientation the coordinates to which the angles are relative.
                    </dd>
                    <dt>Move</dt>
                    <dd>
                        Move camera position forward/back, left/right, up/down where these directions
                        are relative to the current camera orientation, while the displacement is
                        added to the camera position at the last time the "0" Button was
                        clicked (or when CamControl started).  The left/right arrowed buttons control
                        the scale of motion.
                    </dd>
                </dl>
            </font>
            <h2>Miscellaneous</h2>
                <font size=4>
                    <ul>
                        <li>
                            <dl>
                                <dt>LICENSE</dt>
                                <dd>This software package and portions of it can be freely modified, included in other software, and distributed</dd>
                            </dl>
                        </li>
                        <li>Source code available at: https://github.com/k0nichiwa/FreeCAD_CamControl</li>
                        <li>A video demo can be found at: https://www.bitchute.com/video/gWMVmOAi1KR7/</li>
                        <li>
                            Depending on the OS, etc., not all keys or mouse buttons can be bound.
                        </li>
                        <li>
                            Its not possible to bind key combinations or modified keys such
                            as "Shift+K" for example; you can bind "Shift", or "K" but not
                            the combination.
                        </li>

                    </ul>
                </font>
                <br>
                <br>
        </body>
    """
        )
        r = centeredDialogRectInWindowForScreen(800, 600, FreeCAD.Gui.getMainWindow().geometry(), PySide.QtGui.QApplication.desktop().screenGeometry())
        self.setGeometry(r)
        self.minimumWidth = 100
        self.minimumHeight = 100
        self.setWindowTitle('CamControl:  Help')
        self.setWindowFlags(PySide.QtCore.Qt.WindowStaysOnTopHint & ~PySide.QtCore.Qt.WindowMaximizeButtonHint)
        self.show()
    # eo -- def initUI(self):
# eo -- class HelpDialog(PySide.QtGui.QDialog):  

class CamControlPanel(PySide.QtCore.QObject):

    GAME_CONTROL_DELAY_MS = 3000
    # try for 50 FPS and track actual time between them
    # to try to make smooth motion
    GAME_CONTROL_MOVE_UPDATE_MS = 20

    # when in game control mode we update elements of the
    # task dialog UI on an interval timer, rather than 
    # immediately as usual, to make interactive camera control more responsive
    GAME_CONTROL_DIALOG_UI_UPDATE_DELAY_MS = 1000

    # this is 10 mm / sec
    DEFAULT_GAME_CONTROL_MOVE_SPEED_MM_SEC = GameControlMoveScale(1, 1)

    def installAppEventFilter(self):
        qApp = PySide.QtGui.QApplication.instance()
        qApp.installEventFilter(self)

    def removeAppEventFilter(self):
        qApp = PySide.QtGui.QApplication.instance()
        qApp.removeEventFilter(self)

    def __init__(self):
        super().__init__()

        self.doc = FreeCAD.ActiveDocument
        self.guiDoc = FreeCADGui.ActiveDocument
        self.camState = CameraState(FreeCAD.Placement(), CameraType.Perspective)
        self.setCamStateFromGUIDoc()
        self.initialCamState = self.camState.copy()
        self.helpDialog = None

        self.camsSerialization = CamerasSerialization(self.doc, CAMERA_LOCATIONS_OBJECTGROUP_NAME)
        self.settings = Settings()
        self.settingsSerialization = SettingsSerialization(self.settings)
        self.settingsSerialization.read()

        self.settingsDialog = None

        self.gameControl = False

        self.gameControlLastMousePos = None
        self.gameControlLastCamRotation = None
        self.gameControlStartGameControlDialog = None

        # (x,y,z, rot) , z is forward, y is up, x is left, rot is "roll" rotation
        # units are millimeters per second or degrees per second
        self.gameControlMoveInc = [ 0.0, 0.0, 0.0, 0.0 ]

        self.gameControlMoveAndRotSpeed = CamControlPanel.DEFAULT_GAME_CONTROL_MOVE_SPEED_MM_SEC
        self.gameControlForwardRotationScale = 90.0
        # track the move (+,-) movement along each axis, and rotation, separately 
        self.gameControlMoveIncPos = None
        self.gameControlMoveIncNeg = None

        # for repeating GAME_CONTROL_MOVE_UPDATE_MS 
        self.gameControlMoveTimer = None
        # keep track of time between motion display updates
        self.gameControlElapsedTime = None
        # reading on gameControlElapsedTime at last update
        self.gameControlMSLastMoveUpdate = None

        # want to avoid updating GUI from within the event filter 
        # follow apple pattern, self.setNeedsUpdateGUI() will create the one shot timer
        # if necessary, and updateGUI will do it and reset the boolean
        self.needsUpdateGUI = False
        self.updateGUITimer = None

        p = self.camState.placement
        self.yawPitchRollInitialRotation = p.Rotation
        self.moveScrollBarInitialPosition = p.Base
        self.moveScrollBarScale = GameControlMoveScale(0,1) # 1 mm

        if  'Form_CamControlPanel' in dir():
            self.form = Form_CamControlPanel()
            self.form.setupUi(self.form)
        else:
            self.form = FreeCADGui.PySideUic.loadUi(camdialog_ui_path)

        self.initUI()
        self.installAppEventFilter()

    # *******************************************************
    # **  Auxilliary Buttons And Signals  *******************
    # *******************************************************

    def onReReadButtonClicked(self):
        self.setCamStateFromGUIDoc()

    def onSettingsButtonClicked(self):
        self.removeAppEventFilter()
        if self.settingsDialog == None:
            self.settingsDialog = SettingsDialog(self.settings.copy())
        else:
            self.settingsDialog.show()
        self.settingsDialog.okClicked.connect(self.onSettingsDialogOkClicked)
        self.settingsDialog.cancelClicked.connect(self.onSettingsDialogCancelClicked)

    def onSettingsDialogOkClicked(self):
        self.settings.copyFrom( self.settingsDialog.settings )
        self.settingsDialog = None
        self.settingsSerialization.save()
        self.installAppEventFilter()
        self.setGameControlEndInputLabelText()

    def onSettingsDialogCancelClicked(self):
        self.settingsDialog = None
        self.installAppEventFilter()

    # *******************************************************
    # **  GUI DOC UPDATE ************************************
    # *******************************************************

    def updateGUI(self):
        self.needsUpdateGUI = False
        FreeCADGui.updateGui()        

    def onUpdateGUITimer(self):
        self.updateGUITimer = None
        self.updateGUI()

    def setNeedsUpdate(self):
        if not self.needsUpdateGUI:
            self.needsUpdateGUI = True
            self.updateGUITimer = PySide.QtCore.QTimer()
            self.updateGUITimer.setSingleShot(True)
            self.updateGUITimer.timeout.connect(self.onUpdateGUITimer)
            self.updateGUITimer.start(1)

    # *******************************************************
    # **  self.camState  *************************************
    # *******************************************************

    def setCamStateFromGUIDoc(self):
        cam = self.guiDoc.ActiveView.getCameraNode()
        base = FreeCAD.Vector(cam.position.getValue())
        rot = FreeCAD.Rotation(*cam.orientation.getValue().getValue())
        placement = FreeCAD.Placement(base, rot)
        camType = CameraType.Perspective
        docCamType = self.guiDoc.activeView().getCameraType()
        try:
            camType = CameraType.fromString(docCamType)
        except:
            print("Unknown document camera type, defaulting to Perspective")

        newCamState = CameraState(placement, camType)
        self.camState.set(newCamState)

    def setGUIDocCamFromCamState(self, camState):
        p = camState.placement
        pos = p.Base
        rot = p.Rotation
        camType = camState.cameraType
        self.guiDoc.activeView().setCameraType(camType.value)
        cam = self.guiDoc.ActiveView.getCameraNode()
        cam.position.setValue(pos.x, pos.y, pos.z)
        cam.orientation.setValue(*rot.Q)
        self.setNeedsUpdate()

    # CameraState.changed SIGNAL HANDLER
    def onCamStateChanged(self):
        "Update self.guiDoc ActiveView camera node to self.camState settings"
        self.setGUIDocCamFromCamState(self.camState)

    # CameraState.changed SIGNAL HANDLER
    # def onCamStateChanged_CamLocationsComboBox(self):
    #     "When the camera state no longer matches saved state clear item"
    #     withNoSignal(self.form.CamLocationsComboBox, lambda:self.form.CamLocationsComboBox.setCurrentIndex(-1))

    # CameraState.changed SIGNAL HANDLER
    def onCamStateChanged_MoveScrollBars(self):
        self.form.MoveZeroPushButton.clicked.emit()

    # CameraState.positionChanged SIGNAL HANDLER
    def onCamStatePosChanged(self, newPos):
        withNoSignal(self.form.Pos_X, lambda: self.form.Pos_X.setValue(newPos.x))
        withNoSignal(self.form.Pos_Y, lambda: self.form.Pos_Y.setValue(newPos.y))
        withNoSignal(self.form.Pos_Z, lambda: self.form.Pos_Z.setValue(newPos.z))

    # CameraState.orientationChanged SIGNAL HANDLER
    def onCamStateOrientationChanged_PtAt_Up(self, newRot):
        "Update Task Dialog PtAt and Up UI elements"
        camPointAt = newRot.multVec(FreeCAD.Vector(0,0,-1)) * 10
        camUp = newRot.multVec(FreeCAD.Vector(0,1,0)) * 10
        withNoSignal(self.form.PointAt_X, lambda: self.form.PointAt_X.setValue( camPointAt.x))
        withNoSignal(self.form.PointAt_Y, lambda: self.form.PointAt_Y.setValue( camPointAt.y))
        withNoSignal(self.form.PointAt_Z, lambda: self.form.PointAt_Z.setValue( camPointAt.z))
        withNoSignal(self.form.Up_X, lambda: self.form.Up_X.setValue( camUp.x))
        withNoSignal(self.form.Up_Y, lambda: self.form.Up_Y.setValue( camUp.y))
        withNoSignal(self.form.Up_Z, lambda: self.form.Up_Z.setValue( camUp.z))

    # CameraState.orientationChanged SIGNAL HANDLER
    def onCamStateOrientationChanged_YawPitchRoll(self, newRot):
        "Update Task Dialog PtAt and Up UI elements"
        rot = self.yawPitchRollInitialRotation.inverted().multiply(newRot)
        yawPitchRoll = rot.toEuler()
        withNoSignal(self.form.YawScrollBar, lambda: self.form.YawScrollBar.setValue( yawPitchRoll[0]))
        withNoSignal(self.form.PitchScrollBar, lambda: self.form.PitchScrollBar.setValue( yawPitchRoll[1]))
        withNoSignal(self.form.RollScrollBar, lambda: self.form.RollScrollBar.setValue( yawPitchRoll[2]))

    def onCamStateCameraTypeChanged(self, newType):
        index = self.form.CameraTypeComboBox.findText(newType)
        withNoSignal(self.form.CameraTypeComboBox, lambda:self.form.CameraTypeComboBox.setCurrentIndex(index))
        
    # *******************************************************
    # **  Cmera Type: Task Dialog UI ************************
    # *******************************************************

    def onCameraTypeComboBoxCurrentIndexChanged(self, newIndex):
        item = self.form.CameraTypeComboBox.itemText(newIndex)
        camType = CameraType.fromString(item)
        self.camState.cameraTypeChanged.disconnect(self.onCamStateCameraTypeChanged)
        self.camState.cameraType = camType
        self.camState.cameraTypeChanged.connect(self.onCamStateCameraTypeChanged)

    # *******************************************************
    # **  Position: Task Dialog UI **************************
    # *******************************************************

    # valueChanged SIGNAL HANDLER : Position: Task Dialog  SIGNAL HANDLER
    def onUIPos_ValueChanged(self, value):
        camPos = FreeCAD.Vector( self.form.Pos_X.value(), self.form.Pos_Y.value(), self.form.Pos_Z.value() )
        self.camState.positionChanged.disconnect(self.onCamStatePosChanged)
        self.camState.setPosition(camPos)      
        self.camState.positionChanged.connect(self.onCamStatePosChanged)

    # *******************************************************
    # **  PtAt : Direction : Task Dialog UI *****************
    # *******************************************************

    def onUIPointAtOrUp_ValueChanged(self, newValue):
        camPointAt = FreeCAD.Vector( self.form.PointAt_X.value(), self.form.PointAt_Y.value(), self.form.PointAt_Z.value() )        
        camUp = FreeCAD.Vector( self.form.Up_X.value(), self.form.Up_Y.value(), self.form.Up_Z.value() )   
        self.camState.orientationChanged.disconnect(self.onCamStateOrientationChanged_PtAt_Up)
        try:
            self.camState.pointAt(camPointAt, camUp)
        except FreeCAD.Base.FreeCADError:
            showErrorMessage("PtAt should not be zero, and should not be parallel to Up")
        self.camState.orientationChanged.connect(self.onCamStateOrientationChanged_PtAt_Up)

    # *******************************************************
    # **  Yaw Pitch Roll : Direction : Task Dialog UI *******
    # *******************************************************

    def onUIYawPitchRoll_ValueChanged(self):
        yaw = self.form.YawScrollBar.value()
        pitch = self.form.PitchScrollBar.value()
        roll = self.form.RollScrollBar.value()
        rot = FreeCAD.Rotation(yaw,pitch,roll)
        rot = self.yawPitchRollInitialRotation.multiply(rot)
        self.camState.orientationChanged.disconnect(self.onCamStateOrientationChanged_YawPitchRoll)
        self.camState.setRotation(rot)
        self.camState.orientationChanged.connect(self.onCamStateOrientationChanged_YawPitchRoll)

    def onYPRZeroPushButtonClicked(self):
        self.yawPitchRollInitialRotation = self.camState.placement.Rotation
        withNoSignal(self.form.YawScrollBar, lambda: self.form.YawScrollBar.setValue( 0.0))
        withNoSignal(self.form.PitchScrollBar, lambda: self.form.PitchScrollBar.setValue(0.0))
        withNoSignal(self.form.RollScrollBar, lambda: self.form.RollScrollBar.setValue(0.0))

    # *******************************************************
    # **  Move Scroll Bars : Task Dialog UI *****************
    # *******************************************************

    def setCamPositionFromMoveScrollBars(self):
        rotAxes = self.camState.getCamRotAxes()
        scale = self.moveScrollBarScale.value()
        moveForward = self.form.MoveForwardScrollBar.value() * scale
        moveRight = self.form.MoveRightScrollBar.value() * scale
        moveUp = self.form.MoveUpScrollBar.value() * scale
        delta = rotAxes[0] * moveRight + rotAxes[1] * moveUp + rotAxes[2] * moveForward
        self.camState.changed.disconnect(self.onCamStateChanged_MoveScrollBars)
        self.camState.setPosition( self.moveScrollBarInitialPosition + delta )
        self.camState.changed.connect(self.onCamStateChanged_MoveScrollBars)

    def onMoveScrollBarValueChanged(self):
        self.setCamPositionFromMoveScrollBars()

    def onMoveZeroPushButtonClicked(self):
        withNoSignal(self.form.MoveForwardScrollBar, lambda:self.form.MoveForwardScrollBar.setValue(0))
        withNoSignal(self.form.MoveRightScrollBar, lambda:self.form.MoveRightScrollBar.setValue(0))
        withNoSignal(self.form.MoveUpScrollBar, lambda:self.form.MoveUpScrollBar.setValue(0))
        self.moveScrollBarInitialPosition = self.camState.placement.Base

    def onMoveScaleDecreasePushButtonClicked(self):
        self.moveScrollBarScale.decreaseScale()

    def onMoveScaleIncreasePushButtonClicked(self):
        self.moveScrollBarScale.increaseScale()

    def onMoveScaleValueChanged(self, newValue):
        s = str(newValue) + " mm"
        self.form.MoveScaleLabel.setText(s)
        self.setCamPositionFromMoveScrollBars()

    # *******************************************************
    # **  Saved Camera Records : Task Dialog UI *************
    # *******************************************************

    def onInsCamLocPushButtonClicked(self):
        locName, ok = PySide.QtGui.QInputDialog.getText(self.form, 'Insert Camera Location', 'Location Name:')
        if ok:
            camRec = CameraRecord(locName, locName, self.camState.copy())
            try:
                index = self.camsSerialization.saveCamRecord(camRec, True)
                self.form.CamLocationsComboBox.blockSignals(True)
                self.form.CamLocationsComboBox.insertItem(index, camRec.label)
                self.form.CamLocationsComboBox.setCurrentIndex(index)
                self.form.CamLocationsComboBox.blockSignals(False)
            except CamerasSerializationGroupObjectWrongTypeIdException:
                self.showCamControlObjectExistsErrorMessage()

    def onDelCamLocPushButtonClicked(self):
        index = self.form.CamLocationsComboBox.currentIndex()
        if index != -1:
            self.form.CamLocationsComboBox.blockSignals(True)
            self.camsSerialization.deleteCamRecord(index)
            self.form.CamLocationsComboBox.removeItem(index)
            self.form.CamLocationsComboBox.setCurrentIndex(-1)
            self.form.CamLocationsComboBox.blockSignals(False)

    def onUpdateCamLocPushButtonClicked(self):
        index = self.form.CamLocationsComboBox.currentIndex()
        if index != -1:
            try:
                camRec = self.camsSerialization.camRecordList[index]
                camRec.camState = self.camState.copy()
                self.camsSerialization.saveCamRecord(camRec, False)
            except CamerasSerializationGroupObjectWrongTypeIdException:
                self.showCamControlObjectExistsErrorMessage()
        else:
            showErrorMessage('No camera record selected.  Use "Ins" to insert new record')

    def showCamControlObjectExistsErrorMessage(self):
        showErrorMessage("The Document Scene Graph already contains an object named 'CamControl', please copy to a new name and delete the existing 'CamControl' object")

    def onRenameCamLocPushButtonClicked(self):
        oldIndex = self.form.CamLocationsComboBox.currentIndex()
        if oldIndex != -1:
            camRec = self.camsSerialization.camRecordList[oldIndex]
            locName, ok = PySide.QtGui.QInputDialog.getText(self.form, 'Rename Camera Location', 'Location Name:', text=camRec.label)
            if ok:
                camRec.label = locName
                try:
                    newIndex = self.camsSerialization.saveCamRecord(camRec, False)
                    self.form.CamLocationsComboBox.blockSignals(True)
                    self.form.CamLocationsComboBox.removeItem(oldIndex)
                    self.form.CamLocationsComboBox.insertItem(newIndex, camRec.label)
                    self.form.CamLocationsComboBox.setCurrentIndex(newIndex)
                    self.form.CamLocationsComboBox.blockSignals(False)
                except CamerasSerializationGroupObjectWrongTypeIdException:
                    self.showCamControlObjectExistsErrorMessage()

    def onCamLocationsComboBoxActivated(self):
        index = self.form.CamLocationsComboBox.currentIndex()
        if index != -1:
            camRec = self.camsSerialization.camRecordList[index]
            # self.camState.changed.disconnect(self.onCamStateChanged_CamLocationsComboBox)
            self.camState.set(camRec.camState)
            # self.camState.changed.connect(self.onCamStateChanged_CamLocationsComboBox)

    # *******************************************************
    # **  Game Control  *************************************
    # *******************************************************

    def setGameControlEndInputLabelText(self):
        self.form.GameControlEndInputLabel.setText("( to end " + self.settings.inputBindingDict[Settings.BIND_END_GAME_CONTROL_KEY].name() + " )")

    def onGameControlMoveScaleValueChanged(self, newValue):
        self.form.GameControlMoveScaleLabel.setText( str(newValue) + " mm / sec")

    def onGameControlDecreaseMoveSpeedPushButtonClicked(self):
        self.gameControlMoveAndRotSpeed.decreaseScale()

    def onGameControlIncreaseMoveSpeedPushButtonClicked(self):
        self.gameControlMoveAndRotSpeed.increaseScale()

    def gameControlCloseStartGameControlDialog(self):
        if self.gameControlStartGameControlDialog != None:
            self.gameControlStartGameControlDialog.rejected.disconnect(self.onGameControlCountDownCanceled)
            self.gameControlStartGameControlDialog.close()
            self.gameControlStartGameControlDialog = None

    def gameControlOnDontShowStartGameControlDialogChanged(self, newState):
        self.settings.DONT_SHOW_START_GAME_CONTROL_DIALOG = newState
        self.settingsSerialization.save()

    def onGameControlCheckBox_StateChanged(self):
        if self.form.GameControlCheckBox.isChecked():
            if not self.settings.DONT_SHOW_START_GAME_CONTROL_DIALOG:
                self.gameControlStartGameControlDialog = StartGameControlDialog("USE " + self.settings.inputBindingDict[Settings.BIND_END_GAME_CONTROL_KEY].name() + " to exit")
                self.gameControlStartGameControlDialog.cancelPressed.connect(self.onGameControlCountDownCanceled)
                self.gameControlStartGameControlDialog.startPressed.connect(self.gameControlStart)
                self.gameControlStartGameControlDialog.rejected.connect(self.onGameControlCountDownCanceled)
                self.gameControlStartGameControlDialog.dontShowAgainChanged.connect(self.gameControlOnDontShowStartGameControlDialogChanged)
            else:
                self.gameControlStart()
        else:
            self.setGameControlMoveInc([0.0, 0.0, 0.0, 0.0])
            self.gameControlCloseStartGameControlDialog()
            self.gameControl = False
            self.camState.setSignalDelay(0)
            self.gameControlMoveIncPos = None
            self.gameControlMoveIncNeg = None
            
    def onGameControlCountDownCanceled(self):
        self.form.GameControlCheckBox.setChecked(False)

    def gameControlStart(self):    
        self.gameControlCloseStartGameControlDialog()
        self.gameControl = True
        self.camState.setSignalDelay(CamControlPanel.GAME_CONTROL_DIALOG_UI_UPDATE_DELAY_MS)
        self.gameControlLastMousePos = None
        self.gameControlLastCamRotation = None
        self.gameControlMoveIncPos = [ 0.0, 0.0, 0.0, 0.0 ] #FreeCAD.Vector(0,0,0)
        self.gameControlMoveIncNeg = [ 0.0, 0.0, 0.0, 0.0 ]

    def setGameControlMoveInc(self, vInc):
        #-- setting to (0,0,0, 0) turns movement off, stops timers and updates
        #-- setting to non-zero starts timers, but raises exception if
        #-- self.gameControl is False
        if self.gameControlMoveInc != vInc:
            self.gameControlMoveInc = vInc
            if self.gameControlMoveInc == [ 0.0, 0.0, 0.0, 0.0 ]:
                self.gameControlMoveTimer.stop()
                self.gameControlMoveTimer = None
                self.gameControlElapsedTime = None
                self.gameControlMSLastMoveUpdate = None
            else:
                if not self.gameControl: # bug
                    raise "Cant move for game control when game control is off"
                if self.gameControlMoveTimer == None:
                    self.gameControlMoveTimer = PySide.QtCore.QTimer()
                    self.gameControlMoveTimer.timeout.connect(self.onGameControlMoveTimer)
                    self.gameControlMoveTimer.start(CamControlPanel.GAME_CONTROL_MOVE_UPDATE_MS)
                    self.gameControlElapsedTime = PySide.QtCore.QElapsedTimer()
                    self.gameControlElapsedTime.start()
                    self.gameControlMSLastMoveUpdate = 0

    def gameControlMoveGetElapsedMS(self):
        msElapsed = self.gameControlElapsedTime.nsecsElapsed() / 1000000.0
        ret = msElapsed - self.gameControlMSLastMoveUpdate
        self.gameControlMSLastMoveUpdate = msElapsed
        return ret

    def onGameControlMoveTimer(self):
        if not self.gameControl: # bug
            raise "Move timer shouldnt fire when game control is off"
        msElapsed = self.gameControlMoveGetElapsedMS()
        rotAxes = self.camState.getCamRotAxes()
        vDelta = rotAxes[0] * self.gameControlMoveInc[0] + rotAxes[1] * self.gameControlMoveInc[1] + rotAxes[2] * self.gameControlMoveInc[2]
        shouldSetGUIDocCamFromCamState = False
        if vDelta != 0.0:
            p = self.camState.placement
            p.move( vDelta * (msElapsed/1000) )
            self.camState.placement = p
            shouldSetGUIDocCamFromCamState = True
        if self.gameControlMoveInc[3] != 0.0:
            angle = self.gameControlMoveInc[3] * (msElapsed/1000)
            forwardClockwiseRot = makeRotationAxisAngle(0,0,1, -angle)
            rot = self.camState.placement.Rotation
            rot = rot.multiply(forwardClockwiseRot)
            self.camState.setRotation(rot)
            self.gameControlLastCamRotation = rot
            self.gameControlLastMousePos = None
            shouldSetGUIDocCamFromCamState = True
        if shouldSetGUIDocCamFromCamState:
            self.setGUIDocCamFromCamState(self.camState)
        
    # *******************************************************
    # **  FreeCAD Task Dialog Interface/Init ****************
    # *******************************************************

    def getStandardButtons(self):
        return  TaskStandardButtons.Help.value | TaskStandardButtons.Cancel.value | TaskStandardButtons.Ok.value

    def helpRequested(self):
        if self.helpDialog == None:
            self.helpDialog = HelpDialog()
            self.helpDialog.rejected.connect(self.onHelpDialogClosed)
        else:
            self.helpDialog.show()

    def onHelpDialogClosed(self):
        if self.helpDialog != None:
            self.helpDialog.close()
            self.helpDialog = None

    def reject(self):            
        self.setGUIDocCamFromCamState(self.initialCamState)
        self.removeAppEventFilter()
        FreeCADGui.Control.closeDialog()

    def accept(self):   
        self.removeAppEventFilter()
        FreeCADGui.Control.closeDialog()

    def clicked(self, buttonID):
        pass

    def initUI(self):
        self.form.ReReadPushButton.clicked.connect(self.onReReadButtonClicked)
        self.form.SettingsPushButton.clicked.connect(self.onSettingsButtonClicked)

        self.form.GameControlCheckBox.setChecked(False)
        self.setGameControlEndInputLabelText()
        self.form.GameControlCheckBox.stateChanged.connect(self.onGameControlCheckBox_StateChanged)
        self.gameControlMoveAndRotSpeed.valueChanged.connect(self.onGameControlMoveScaleValueChanged)
        self.form.GameControlDecreaseMoveSpeedPushButton.clicked.connect(self.onGameControlDecreaseMoveSpeedPushButtonClicked)
        self.form.GameControlIncreaseMoveSpeedPushButton.clicked.connect(self.onGameControlIncreaseMoveSpeedPushButtonClicked)

        for camRec in self.camsSerialization.camRecordList:
            self.form.CamLocationsComboBox.addItem(camRec.label)

        self.form.CamLocationsComboBox.setCurrentIndex(-1)
        self.form.CamLocationsComboBox.activated.connect(self.onCamLocationsComboBoxActivated)
        # self.form.CamLocationsComboBox.currentIndexChanged.connect(self.onCamLocationsComboBoxCurrentIndexChanged)
        self.form.InsCamLocPushButton.clicked.connect( self.onInsCamLocPushButtonClicked)
        self.form.DelCamLocPushButton.clicked.connect( self.onDelCamLocPushButtonClicked)
        self.form.UpdateCamLocPushButton.clicked.connect( self.onUpdateCamLocPushButtonClicked)
        self.form.RenameCamLocPushButton.clicked.connect( self.onRenameCamLocPushButtonClicked)

        for camType in CameraType:
            self.form.CameraTypeComboBox.addItem(camType.value)
        self.form.CameraTypeComboBox.currentIndexChanged.connect(self.onCameraTypeComboBoxCurrentIndexChanged)

        self.form.Pos_X.valueChanged.connect(self.onUIPos_ValueChanged)
        self.form.Pos_Y.valueChanged.connect(self.onUIPos_ValueChanged)
        self.form.Pos_Z.valueChanged.connect(self.onUIPos_ValueChanged)

        self.form.PointAt_X.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)
        self.form.PointAt_Y.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)
        self.form.PointAt_Z.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)
        self.form.Up_X.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)
        self.form.Up_Y.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)
        self.form.Up_Z.valueChanged.connect(self.onUIPointAtOrUp_ValueChanged)

        self.form.YawScrollBar.valueChanged.connect(self.onUIYawPitchRoll_ValueChanged)
        self.form.PitchScrollBar.valueChanged.connect(self.onUIYawPitchRoll_ValueChanged)
        self.form.RollScrollBar.valueChanged.connect(self.onUIYawPitchRoll_ValueChanged)
        self.form.YPRZeroPushButton.clicked.connect(self.onYPRZeroPushButtonClicked)

        self.form.MoveForwardScrollBar.valueChanged.connect(self.onMoveScrollBarValueChanged)
        self.form.MoveRightScrollBar.valueChanged.connect(self.onMoveScrollBarValueChanged)
        self.form.MoveUpScrollBar.valueChanged.connect(self.onMoveScrollBarValueChanged)
        self.form.MoveZeroPushButton.clicked.connect(self.onMoveZeroPushButtonClicked)
        self.form.MoveScaleDecreasePushButton.clicked.connect(self.onMoveScaleDecreasePushButtonClicked)
        self.form.MoveScaleIncreasePushButton.clicked.connect(self.onMoveScaleIncreasePushButtonClicked)
        self.moveScrollBarScale.valueChanged.connect(self.onMoveScaleValueChanged)

        self.camState.changed.connect(self.onCamStateChanged)
        # self.camState.changed.connect(self.onCamStateChanged_CamLocationsComboBox)
        self.camState.changed.connect(self.onCamStateChanged_MoveScrollBars)
        self.camState.positionChanged.connect(self.onCamStatePosChanged)
        self.camState.orientationChanged.connect(self.onCamStateOrientationChanged_PtAt_Up)
        self.camState.orientationChanged.connect(self.onCamStateOrientationChanged_YawPitchRoll)
        self.camState.cameraTypeChanged.connect(self.onCamStateCameraTypeChanged)

        self.gameControlMoveAndRotSpeed.emitValueChangedSignal()
        self.moveScrollBarScale.emitValueChangedSignal()
        self.camState.emitCameraTypeChanged()
        self.camState.emitPositionChanged()
        self.camState.emitOrientationChanged()

    # -- eo: def initUI(self)

    # *******************************************************
    # **  Event Filter And Related       ********************
    # *******************************************************

    def testGoUp(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_UP_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncPos[1] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testGoDown(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_DOWN_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncNeg[1] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testGoLeft(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_LEFT_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncPos[0] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testGoRight(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_RIGHT_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncNeg[0] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testGoForward(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_FORWARD_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncPos[2] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testGoBackwards(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_BACKWARD_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncNeg[2] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def testStartGameControl(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_START_GAME_CONTROL_KEY].calcEventMatch(event)
        if match == EventMatch.Engaged:
            self.form.GameControlCheckBox.setChecked(True)
            return True
        return False
    def testEndGameControl(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_END_GAME_CONTROL_KEY].calcEventMatch(event)
        if match == EventMatch.Engaged:
            self.form.GameControlCheckBox.setChecked(False)
            return True
        return False
    def gameControlTestRotClockwise(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_ROT_CLOCKWISE_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncPos[3] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def gameControlTestRotCounterClockwise(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_ROT_COUNTER_CLOCKWISE_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            self.gameControlMoveIncNeg[3] = 1.0 if match == EventMatch.Engaged else 0.0
            return True
        return False
    def gameControlTestMoveScaleIncrease(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_SCALE_INCREASE_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            if match == EventMatch.Engaged:
                self.gameControlMoveAndRotSpeed.increaseScale()
            return True
        return False
    def gameControlTestMoveScaleDecrease(self, event):
        match = self.settings.inputBindingDict[Settings.BIND_MOVE_SCALE_DECREASE_KEY].calcEventMatch(event)
        if match != EventMatch.NoMatch:
            if match == EventMatch.Engaged:
                self.gameControlMoveAndRotSpeed.decreaseScale()
            return True
        return False

    def eventFilter(self, source, event):
        ret = False
        et = event.type()

        if not ret and self.gameControl and self.testEndGameControl(event):
            ret = True

        if not ret and not self.gameControl and self.testStartGameControl(event):
            ret = True

        if not ret and self.gameControl:
            ret = self.testGoBackwards(event) or self.testGoForward(event) or self.testGoDown(event) or self.testGoUp(event) or self.testGoLeft(event) or self.testGoRight(event) or self.gameControlTestRotClockwise(event) or self.gameControlTestRotCounterClockwise(event) or self.gameControlTestMoveScaleIncrease(event) or self.gameControlTestMoveScaleDecrease(event)

            if ret:
                moveScale = self.gameControlMoveAndRotSpeed.value()
                moveInc = [moveScale*(self.gameControlMoveIncPos[0]-self.gameControlMoveIncNeg[0]), moveScale*(self.gameControlMoveIncPos[1]-self.gameControlMoveIncNeg[1]), moveScale*(self.gameControlMoveIncPos[2]-self.gameControlMoveIncNeg[2]), self.gameControlForwardRotationScale*(self.gameControlMoveIncPos[3]-self.gameControlMoveIncNeg[3])]
                self.setGameControlMoveInc(moveInc)
            # eo -- if ret:

            if not ret and et == PySide.QtCore.QEvent.MouseMove:
                ret = True
                pos = event.screenPos()
                if self.gameControlLastMousePos == None:
                    self.gameControlLastMousePos = pos
                if self.gameControlLastCamRotation == None:
                    self.gameControlLastCamRotation = self.camState.placement.Rotation
                delta = pos - self.gameControlLastMousePos
                vDelta = FreeCAD.Vector(delta.x(), delta.y(), 0)
                vDelta_Length = vDelta.Length

                if vDelta_Length > 1.0E-3:
                    mouseRot = makeRotationAxisAngle(0,1,0, -vDelta.x * self.settings.MOUSE_SENSITIVITY)

                    # try opposite order 
                    # mouseRot2 = makeRotationAxisAngle(1,0,0, vDelta.y * ( 1.0 if self.settings.INVERT_MOUSE_Y else -1.0 ) * self.settings.MOUSE_SENSITIVITY)
                    # rot = mouseRot2.multiply(mouseRot)

                    mouseRot2 = makeRotationAxisAngle(1,0,0, vDelta.y * ( 1.0 if self.settings.INVERT_MOUSE_Y else -1.0 ) * self.settings.MOUSE_SENSITIVITY)
                    rot = mouseRot.multiply(mouseRot2)

                    rot = self.gameControlLastCamRotation.multiply(rot)
                    self.camState.setRotation(rot)
                    self.setGUIDocCamFromCamState(self.camState)
                else:
                    self.camState.setRotation(self.gameControlLastCamRotation)
                    self.setGUIDocCamFromCamState(self.camState)
            # eo - if et == PySide.QtCore.QEvent.MouseMove:
        # eo - if self.gameControl:

        if not ret:
            ret = super().eventFilter(source, event)
        
        return ret
    # eo - def eventFilter

errorMessage = None
if FreeCADGui.ActiveDocument == None:
    errorMessage = "No Active Document"
elif FreeCADGui.ActiveDocument.ActiveView == None:
    errorMessage = "Active Document Has No Active View"
elif FreeCADGui.ActiveDocument.ActiveView.getCameraNode() == None:
    errorMessage = "No Camera For Active Document's Active View"

if errorMessage == None:
    panel = CamControlPanel()
    FreeCADGui.Control.showDialog(panel)
else:
    showErrorMessage(errorMessage)
